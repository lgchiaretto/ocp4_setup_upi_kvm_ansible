- name: Create clusters UPI on KVM
  hosts: localhost
  gather_facts: false
  become: true
  become_method: sudo

  vars:
    mirror_url: "https://mirror.openshift.com/pub/openshift-v4/x86_64/dependencies/rhcos/"

  tasks:
    - name: Ensure necessary packages are installed
      ansible.builtin.yum:
        name:
          - qemu-kvm
          - libvirt
          - virt-install
          - virt-manager
          - guestfs-tools
        state: present

    - name: Ensure libvirtd service is running
      ansible.builtin.service:
        name: libvirtd
        state: started
        enabled: true

    - name: Configuring networkmanager to use dnsmasq
      ansible.builtin.copy:
        dest: "/etc/NetworkManager/conf.d/nm-dns.conf"
        content: |
          [main]
          dns=dnsmasq
      register: configdnsmasq

    - name: Create cluster network conf on dnsmasq
      ansible.builtin.template:
        src: "cluster-network.conf.j2"
        dest: "{{ dnsdir }}/{{ clustername }}.conf"
        mode: '0644'
        selevel: s0
        serole: object_r
        setype: dnsmasq_etc_t
        seuser: system_u
      register: dnsmasq

#    - name: Create addnhosts file
#      ansible.builtin.template:
#        src: "dnsmasq.openshift.addnhosts.j2"
#        dest: "/etc/dnsmasq.{{ clustername }}.addnhosts"
#        mode: '0644'
#      register: addnhosts

    - name: Restart Network Manager when configuring dnsmasq
      ansible.builtin.service:
        name: NetworkManager
        state: restarted
      when: dnsmasq.changed

    - name: Restart libvirt when configuring dnsmasq
      ansible.builtin.service:
        name: libvirtd
        state: restarted
      when: dnsmasq.changed

    - name: Sleeping 5 seconds to wait NetworkManager
      ansible.builtin.pause:
        seconds: 5
      when: dnsmasq.changed

    - name: Create cluster directory directory
      ansible.builtin.file:
        path: "/ocp-clusters/{{ clustername }}"
        state: "directory"
        mode: "0755"

    - name: Download installer openshift-install-linux.tar.gz
      ansible.builtin.get_url:
        url: "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocpversion }}/openshift-install-linux.tar.gz"
        dest: "/ocp-clusters/{{ clustername }}/openshift-install-linux.tar.gz"
        mode: '0644'

    - name: Untar on openshift-install-linux.tar.gz file
      ansible.builtin.unarchive:
        remote_src: true
        src: "/ocp-clusters/{{ clustername }}/openshift-install-linux.tar.gz"
        dest: "/ocp-clusters/{{ clustername }}"

    - name: Copy install-config.yaml
      ansible.builtin.template:
        src: install-config.yaml-upi.j2
        dest: /ocp-clusters/{{ clustername }}/install-config.yaml
        mode: '0644'

    - name: Run create cluster manifests
      ansible.builtin.command: "./openshift-install create manifests"
      args:
        chdir: "/ocp-clusters/{{ clustername }}/"
      register: createmanifests
      changed_when: createmanifests.rc == 0

    - name: Configuring master as schedulable
      ansible.builtin.replace:
        path: "/ocp-clusters/{{ clustername }}/manifests/cluster-scheduler-02-config.yml"
        regexp: "mastersSchedulable: false"
        replace: "mastersSchedulable: true"

    - name: Creating CSR Approver manifests
      ansible.builtin.template:
        src: "{{ item }}.yaml.j2"
        dest: /ocp-clusters/{{ clustername }}/openshift/99_{{ item }}.yaml
        mode: '0644'
      loop:
        - csr-approver-sa
        - csr-approver-cr
        - csr-approver-crb
        - csr-approver-rb
        - csr-approver-cronjob

    - name: Run create ignition files
      ansible.builtin.command: "./openshift-install create ignition-configs"
      args:
        chdir: "/ocp-clusters/{{ clustername }}"
      register: install
      changed_when: true

    - name: Create the OCP version cache directory if it does not exist
      ansible.builtin.file:
        path: "/ocp-clusters/.cache/{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/"
        state: directory
        mode: '0755'

    - name: Check if the RHCOS file already exists on cache
      ansible.builtin.stat:
        path: "/ocp-clusters/.cache/{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/rhcos-qemu.x86_64.qcow2"
      register: rhcosfile

    - name: Check if the initramfs file already exists on cache
      ansible.builtin.stat:
        path: "/ocp-clusters/.cache/{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/initramfs.img"
      register: initramfsfile

    - name: Check if the rhcos-live-kernel-x86_64 file already exists on cache
      ansible.builtin.stat:
        path: "/ocp-clusters/.cache/{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/vmlinuz"
      register: kernelfile

    - name: Check if the rhcos-live-rootfs.x86_64.img file already exists on cache
      ansible.builtin.stat:
        path: "/ocp-clusters/.cache/{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/rhcos-live-rootfs.x86_64.img"
      register: rootfsfile

    - name: Download RHCOS images
      ansible.builtin.get_url:
        url: "{{ mirror_url  }}{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/latest/rhcos-qemu.x86_64.qcow2.gz"
        dest: "/ocp-clusters/.cache/{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/rhcos-qemu.x86_64.qcow2.gz"
      when: rhcosfile.stat is defined and not rhcosfile.stat.exists

    - name: Download rootfs file
      ansible.builtin.get_url:
        url: "{{ mirror_url  }}{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/latest/rhcos-live-rootfs.x86_64.img"
        dest: "/ocp-clusters/.cache/{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/rhcos-live-rootfs.x86_64.img"
      when: rootfsfile.stat is defined and not rootfsfile.stat.exists

    - name: Download initramfs images
      ansible.builtin.get_url:
        url: "{{ mirror_url  }}{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/latest/rhcos-live-initramfs.x86_64.img"
        dest: "/ocp-clusters/.cache/{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/initramfs.img"
      when: initramfsfile.stat is defined and not initramfsfile.stat.exists

    - name: Download rhcos-live-kernel-x86_64 images
      ansible.builtin.get_url:
        url: "{{ mirror_url  }}{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/latest/rhcos-live-kernel-x86_64"
        dest: "/ocp-clusters/.cache/{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/vmlinuz"
      when: kernelfile.stat is defined and not kernelfile.stat.exists

    - name: Create rhcos-install directory directory
      ansible.builtin.file:
        path: "/ocp-clusters/{{ clustername }}/rhcos-install"
        state: "directory"
        mode: "0755"

    - name: Copy files to rhcos-install directory
      ansible.builtin.copy:
        remote_src: true
        src: "/ocp-clusters/.cache/{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/{{ item }}"
        dest: "/ocp-clusters/{{ clustername }}/rhcos-install/"
      with_items:
        - vmlinuz
        - initramfs.img
        - rhcos-qemu.x86_64.qcow2.gz
        - rhcos-live-rootfs.x86_64.img

    - name: Extract RHCOS image
      ansible.builtin.command: "gunzip -f -d /ocp-clusters/{{ clustername }}/rhcos-install/rhcos-qemu.x86_64.qcow2.gz"
      register: extractdfile
      changed_when: extractdfile.rc == 0

    - name: Resizing RHCOS image
      ansible.builtin.command: "qemu-img resize /ocp-clusters/{{ clustername }}/rhcos-install/rhcos-qemu.x86_64.qcow2 120G"
      register: resizeqcow2
      changed_when: resizeqcow2.rc == 0

    - name: Create treeinfo file
      ansible.builtin.template:
        src: treeinfo.j2
        dest: /ocp-clusters/{{ clustername }}/rhcos-install/.treeinfo
        mode: '0644'

    - name: Create tmpws.service file
      ansible.builtin.template:
        src: tmpws.service.j2
        dest: /ocp-clusters/{{ clustername }}/tmpws.service
        mode: '0644'

    - name: Create haproxy.cfg file
      ansible.builtin.template:
        src: haproxy.cfg-kvm.j2
        dest: /ocp-clusters/{{ clustername }}/haproxy.cfg
        mode: '0644'

    - name: Create ssh file
      ansible.builtin.copy:
        remote_src: true
        content: "{{ ssh_rsa }}"
        dest: "/ocp-clusters/{{ clustername }}/id_rsa.pub"

# TODO: Fix ssh-insoect
    - name: Customize LB for OpenShift nodes (could take long time)
      ansible.builtin.command: virt-builder fedora-40 --format qcow2 --cache /ocp-clusters/.cache/ --size 10G -o "lb.qcow2" \
                              --firstboot-command "sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config" \
                              --firstboot-command "systemctl disable firewalld" \
                              --firstboot-command "setenforce 0" \
                              --firstboot-command "reboot" \
                              --ssh-inject root:file:/home/lchiaret/.ssh/id_rsa.pub --selinux-relabel \
                              --copy-in bootstrap.ign:/opt/ --copy-in master.ign:/opt/ --copy-in worker.ign:/opt/ \
                              --copy-in tmpws.service:/etc/systemd/system/ \
                              --hostname "lb-{{ clustername }}.{{ basedomain }}" \
                              --install haproxy \
                              --copy-in rhcos-install/rhcos-live-rootfs.x86_64.img:/opt/ \
                              --copy-in rhcos-install/initramfs.img:/opt/ \
                              --copy-in rhcos-install/vmlinuz:/opt/ \
                              --copy-in rhcos-install/.treeinfo:/opt/ \
                              --run-command "systemctl daemon-reload" \
                              --copy-in haproxy.cfg:/etc/haproxy/
                              --run-command "systemctl enable tmpws.service" \
                              --run-command "systemctl enable haproxy.service" \
                              --root-password password:"{{ htpasswd_pass }}"
      register: customizelb
      args:
        chdir: "/ocp-clusters/{{ clustername }}"
      changed_when: customizelb.rc == 0

    - name: Define and start LB
      ansible.builtin.command: virt-install --import --name {{ clustername }}-lb --disk "lb.qcow2" \
                              --memory 1024 --cpu host --vcpus 4 --os-variant rhel9-unknown --network network={{ kvmnetwork }},model=virtio \
                              --noautoconsole --autostart
      register: definelb
      args:
        chdir: "/ocp-clusters/{{ clustername }}"
      changed_when: definelb.rc == 0

    - name: Wait for LB to get an IP address
      ansible.builtin.shell: 'virsh domifaddr {{ clustername }}-lb | awk "/ipv4/ { print \$4 }" | cut -d"/" -f1'
      register: lb_info
      until: lb_info is defined and lb_info.stdout != ""
      retries: "180"
      delay: "1"

    - name: Create addnhosts file lb
      ansible.builtin.template:
        src: "dnsmasq.openshift.addnhosts.j2"
        dest: "/etc/dnsmasq.{{ clustername }}.addnhosts"
        mode: '0644'
      register: addnhostslb

    - name: Restart Network Manager when add lb to etc hosts
      ansible.builtin.service:
        name: NetworkManager
        state: restarted
      when: addnhostslb.changed

    - name: Restart libvirt when add lb to etc hosts
      ansible.builtin.service:
        name: libvirtd
        state: restarted
      when: addnhostslb.changed

    - name: Create virtual machines disks when 3 node cluster
      ansible.builtin.copy:
        remote_src: true
        src: "/ocp-clusters/{{ clustername }}/rhcos-install/rhcos-qemu.x86_64.qcow2"
        dest: "/ocp-clusters/{{ clustername }}/{{ item }}.qcow2"
      with_items:
        - "bootstrap"
        - "master-0"
        - "master-1"
        - "master-2"
      when: sno == "false"

    - name: Create virtual machines disks when SNO
      ansible.builtin.copy:
        remote_src: true
        src: "/ocp-clusters/{{ clustername }}/rhcos-install/rhcos-qemu.x86_64.qcow2"
        dest: "/ocp-clusters/{{ clustername }}/{{ item }}.qcow2"
      with_items:
        - "bootstrap"
        - "master-0"
      when: sno == "true"

    - name: Create worker disks
      ansible.builtin.copy:
        remote_src: true
        src: "/ocp-clusters/{{ clustername }}/rhcos-install/rhcos-qemu.x86_64.qcow2"
        dest: "/ocp-clusters/{{ clustername }}/worker-{{ item }}.qcow2"
      with_sequence: count={{ n_worker }} start=0
      when: n_worker != 0

    - name: Define bootstrap
      ansible.builtin.command: virt-install --name {{ clustername }}-bootstrap \
            --disk /ocp-clusters/{{ clustername }}/bootstrap.qcow2,bus=virtio,size=120 \
            --ram "16000" --cpu host --vcpus "8" --os-variant rhel9-unknown --pxe --network network={{ kvmnetwork }},model=virtio \
            --location rhcos-install/ --noautoconsole \
            --extra-args 'nomodeset rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda \
            coreos.live.rootfs_url=http://lb.{{ clustername }}.{{ basedomain }}:1234/rhcos-live-rootfs.x86_64.img \
            coreos.inst.ignition_url=http://lb.{{ clustername }}.{{ basedomain }}:1234/bootstrap.ign'
      register: bootstrapnodes
      args:
        chdir: "/ocp-clusters/{{ clustername }}"
      changed_when: bootstrapnodes.rc == 0

    - name: Wait for bootstrap to get an IP address
      ansible.builtin.shell: 'virsh domifaddr {{ clustername }}-bootstrap | awk "/ipv4/ { print \$4 }" | cut -d"/" -f1'
      register: bootstrap_info
      until: bootstrap_info is defined and bootstrap_info.stdout != ""
      retries: "180"
      delay: "1"

    - name: Add bootstrap on addnhosts file
      ansible.builtin.lineinfile:
        path: "/etc/dnsmasq.{{ clustername }}.addnhosts"
        line: "{{ bootstrap_info.stdout }} bootstrap.{{ clustername }}.{{ basedomain }}"
      register: bootstrapaddnhosts

    - name: Restart Network Manager when add bootstrap to etc hosts
      ansible.builtin.service:
        name: NetworkManager
        state: restarted
      when: bootstrapaddnhosts.changed

    - name: Restart libvirt when add bootstrap to etc hosts
      ansible.builtin.service:
        name: libvirtd
        state: restarted
      when: bootstrapaddnhosts.changed

    - name: Define KVM VMs when SNO
      ansible.builtin.command: virt-install --name {{ clustername }}-{{ item }}   \
            --disk /ocp-clusters/{{ clustername }}/{{ item }}.qcow2,bus=virtio,size=120 \
            --ram "{{ master_mem }}" --cpu host --vcpus "{{ master_cpu }}" --os-variant rhel9-unknown --pxe --network network={{ kvmnetwork }},model=virtio \
            --location rhcos-install/ --noautoconsole \
            --extra-args 'nomodeset rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda \
            coreos.live.rootfs_url=http://lb.{{ clustername }}.{{ basedomain }}:1234/rhcos-live-rootfs.x86_64.img \
            coreos.inst.ignition_url=http://lb.{{ clustername }}.{{ basedomain }}:1234/master.ign'
      register: createnodes
      args:
        chdir: "/ocp-clusters/{{ clustername }}"
      changed_when: createnodes.rc == 0
      with_items:
        - "master-0"
      when: sno == "true"

    - name: Define KVM masters on 3 node cluster
      ansible.builtin.command: virt-install --name {{ clustername }}-{{ item }} \
            --disk /ocp-clusters/{{ clustername }}/{{ item }}.qcow2,bus=virtio,size=120 \
            --ram "{{ master_mem }}" --cpu host --vcpus "{{ master_cpu }}" --os-variant rhel9-unknown --pxe --network network={{ kvmnetwork }},model=virtio \
            --location rhcos-install/ --noautoconsole \
            --extra-args 'nomodeset rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda \
            coreos.live.rootfs_url=http://lb.{{ clustername }}.{{ basedomain }}:1234/rhcos-live-rootfs.x86_64.img \
            coreos.inst.ignition_url=http://lb.{{ clustername }}.{{ basedomain }}:1234/master.ign'
      register: createnodes
      args:
        chdir: "/ocp-clusters/{{ clustername }}"
      changed_when: createnodes.rc == 0
      with_items:
        - "master-0"
        - "master-1"
        - "master-2"
      when: sno == "false"

    - name: Wait for master-0 to get an IP address
      ansible.builtin.shell: 'virsh domifaddr {{ clustername }}-master-0 | awk "/ipv4/ { print \$4 }" | cut -d"/" -f1'
      register: master0_info
      until: master0_info is defined and master0_info.stdout != ""
      retries: "180"
      delay: "1"

    - name: Wait for master-1 to get an IP address
      ansible.builtin.shell: 'virsh domifaddr {{ clustername }}-master-1 | awk "/ipv4/ { print \$4 }" | cut -d"/" -f1'
      register: master1_info
      until: master1_info is defined and maste12_info.stdout != ""
      retries: "180"
      delay: "1"
      when: sno != "true"

    - name: Wait for master-2 to get an IP address
      ansible.builtin.shell: 'virsh domifaddr {{ clustername }}-master-2 | awk "/ipv4/ { print \$4 }" | cut -d"/" -f1'
      register: master2_info
      until: master2_info is defined and master2_info.stdout != ""
      retries: "180"
      delay: "1"
      when: sno != "true"

    - name: Add master0 on addnhosts file
      ansible.builtin.lineinfile:
        path: "/etc/dnsmasq.{{ clustername }}.addnhosts"
        line: "{{ item.ip }} {{ item.name }}.{{ clustername }}.{{ basedomain }}"
      with_items:
        - { "name": "master-0", "ip": "{{ master0_info.stdout }}" }
        - { "name": "etcd-0", "ip": "{{ master0_info.stdout }}" }
      register: master0addnhosts

    - name: Add masters 1 and 2 on addnhosts file
      ansible.builtin.lineinfile:
        path: "/etc/dnsmasq.{{ clustername }}.addnhosts"
        line: "{{ item.ip }} {{ item.name }}.{{ clustername }}.{{ basedomain }}"
      with_items:
        - { "name": "master-1", "ip": "{{ master1_info.stdout }}" }
        - { "name": "etcd-1", "ip": "{{ master1_info.stdout }}" }
        - { "name": "master-2", "ip": "{{ master2_info.stdout }}" }
        - { "name": "etcd-2", "ip": "{{ master2_info.stdout }}" }
      register: mastersaddnhosts
      when: sno != "true"

    - name: Restart Network Manager when add bootstrap to etc hosts
      ansible.builtin.service:
        name: NetworkManager
        state: restarted

    - name: Define KVM Workers
      ansible.builtin.command: virt-install --name {{ clustername }}-worker-{{ item }} \
               --disk /ocp-clusters/{{ clustername }}/worker-{{ item }}.qcow2,bus=virtio,size=120 \
               --ram {{ worker_mem }} --cpu host --vcpus {{ worker_cpu }} --os-variant rhel9-unknown --pxe --network network={{ kvmnetwork }},model=virtio \
               --location rhcos-install/ --noautoconsole \
               --extra-args 'nomodeset rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda \
               coreos.live.rootfs_url=http://{{ bootstrap_info.stdout }}:1234/rhcos-live-rootfs.x86_64.img \
               ip={{ worker_ips[item | int - 1] }}::{{ hostgw }}:{{ hostnw }}:worker-{{ item }}.{{ clustername }}.{{ basedomain }}:enp1s0:none nameserver={{ hostns }} \
               coreos.inst.ignition_url=http://lb.{{ clustername }}.{{ basedomain }}:1234/worker.ign'
      register: createworkers
      args:
        chdir: "/ocp-clusters/{{ clustername }}"
      changed_when: createworkers.rc == 0
      with_sequence: count={{ n_worker }}
      when: n_worker != 0

    - name: Waiting for RHCOS Installation to finish on bootstrap
      ansible.builtin.shell: "virsh list --name |  { grep -E '{{ clustername }}-master|{{ clustername }}-worker|{{ clustername }}-bootstrap' || true; }"
      retries: 600
      delay: 5
      register: vms
      until: vms.stdout == ""

    - name: Starting virtual machines when SNO
      ansible.builtin.command: "virsh start {{ clustername }}-{{ item }}"
      register: startsnovms
      changed_when: startsnovms.rc == 0
      with_items:
        - "bootstrap"
        - "master-0"
      when: sno == "true"

    - name: Starting virtual machines when 3node
      ansible.builtin.command: "virsh start {{ clustername }}-{{ item }}"
      register: start3nodevms
      changed_when: start3nodevms.rc == 0
      with_items:
        - "bootstrap"
        - "master-0"
        - "master-1"
        - "master-2"
      when: sno == "false"

    - name: Starting worker nodes
      ansible.builtin.command: "virsh start {{ clustername }}-worker-{{ item }}"
      register: startworkervms
      changed_when: startworkervms.rc == 0
      with_sequence: count={{ n_worker }}
      when: n_worker != 0

    - name: Sleeping for 20 minutes before to check if cluster has been installed
      ansible.builtin.pause:
        minutes: 20

    - name: Run wait-for bootstrap-complete
      ansible.builtin.command: "./openshift-install wait-for bootstrap-complete"
      args:
        chdir: "/ocp-clusters/{{ clustername }}"
      async: 3600
      poll: 0
      register: waitbootstrap
      changed_when: true

    - name: Check if bootstrap vm can be removed
      ansible.builtin.async_status:
        jid: "{{ waitbootstrap.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      delay: 10
      retries: 600

    - name: Remove bootstrap VM
      community.libvirt.virt:
        name: "{{ clustername }}-bootstrap"
        state: destroyed

    - name: Run wait-for install-complete
      ansible.builtin.command: "./openshift-install wait-for install-complete"
      args:
        chdir: "/ocp-clusters/{{ clustername }}"
      async: 3600
      poll: 0
      register: install
      changed_when: true

    - name: Check if the cluster has been installed
      ansible.builtin.async_status:
        jid: "{{ install.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      delay: 10
      retries: 600

    - name: Disabling master as worker
      kubernetes.core.k8s:
        kubeconfig: "/ocp-clusters/{{ clustername }}/auth/kubeconfig"
        state: present
        template: "scheduler.yaml.j2"
      when: sno != "true"

    - name: Pause cronjob ocp-csr-approver
      kubernetes.core.k8s:
        kubeconfig: "/ocp-clusters/{{ clustername }}/auth/kubeconfig"
        state: present
        definition:
          apiVersion: batch/v1
          kind: CronJob
          metadata:
            name: "ocp-csr-approver"
            namespace: "ocp-csr-approver"
          spec:
            suspend: true
