---
# Define and start VMs
- name: Define bootstrap
  ansible.builtin.command: virt-install --name {{ clustername }}-bootstrap \
        --disk {{ clusters_dir }}/{{ clustername }}/bootstrap.qcow2,bus=virtio,size=120 \
        --ram "16000" --cpu host --vcpus "8" --os-variant rhel9-unknown --pxe --network network={{ kvmnetwork }},model=virtio \
        --location rhcos-install/ --noautoconsole \
        --extra-args 'nomodeset rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda \
        coreos.live.rootfs_url=http://{{ lbvip.stdout_lines | first }}:1234/rhcos-live-rootfs.x86_64.img \
        coreos.inst.ignition_url=http://{{ lbvip.stdout_lines | first }}:1234/bootstrap.ign'
  register: bootstrapnodes
  become: true
  args:
    chdir: "{{ clusters_dir }}/{{ clustername }}"
  changed_when: bootstrapnodes.rc == 0
  when: sno == "false"

- name: Wait for the bootstrap VM to get an IP address
  ansible.builtin.shell: "virsh domifaddr {{ clustername }}-bootstrap | grep ipv4 | awk '{print $4}' | cut -d'/' -f1"
  retries: 180
  delay: 3
  until: bootstrapip.stdout is defined and bootstrapip.stdout != ""
  register: bootstrapip
  become: true
  changed_when: true
  when: sno == "false"

- name: Define KVM VMs when SNO
  ansible.builtin.command: virt-install --import --name {{ clustername }}-master-0   \
        --disk {{ clusters_dir }}/{{ clustername }}/{{ clustername }}-master-0.qcow2,bus=virtio,size=120 \
        --disk {{ clusters_dir }}/{{ clustername }}/rhcos-master.iso,device=cdrom \
        {% for i in range(1, extra_disks + 1) %}
        --disk {{ clusters_dir }}/{{ clustername }}/{{ clustername }}-extra-disk-{{ i }}.qcow2,bus=virtio,size={{ extra_disk_size }} \
        {% endfor %}
        --boot hd,cdrom --check path_in_use=off --noreboot --noautoconsole \
        --ram "{{ master_mem }}" --cpu host --vcpus "{{ master_cpu }}" --os-variant rhel9-unknown --network network={{ kvmnetwork }},model=virtio
  register: createnodes
  become: true
  args:
    chdir: "{{ clusters_dir }}/{{ clustername }}"
  changed_when: createnodes.rc == 0
  when: sno == "true"

- name: Starting virtual machines when SNO
  ansible.builtin.command: "virsh start {{ clustername }}-{{ item }}"
  register: startsnovms
  changed_when: startsnovms.rc == 0
  become: true
  with_items:
    - "master-0"
  when: sno == "true"

- name: Define KVM masters on 3 node cluster
  ansible.builtin.command: virt-install --name {{ clustername }}-{{ item }} \
        --disk {{ clusters_dir }}/{{ clustername }}/{{ item}}.qcow2,bus=virtio,size=120 \
        --ram "{{ master_mem }}" --cpu host --vcpus "{{ master_cpu }}" --os-variant rhel9-unknown --pxe --network network={{ kvmnetwork }},model=virtio \
        --location rhcos-install/ --noautoconsole \
        --extra-args 'nomodeset rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda \
        coreos.live.rootfs_url=http://{{ lbvip.stdout_lines | first }}:1234/rhcos-live-rootfs.x86_64.img \
        coreos.inst.ignition_url=http://{{ lbvip.stdout_lines | first }}:1234/master.ign'
  register: createnodes
  become: true
  args:
    chdir: "{{ clusters_dir }}/{{ clustername }}"
  changed_when: createnodes.rc == 0
  with_items:
    - "master-0"
    - "master-1"
    - "master-2"
  when: sno == "false"

- name: Add extra disks on master when install ODF
  ansible.builtin.blockinfile:
    path: "/etc/libvirt/qemu/{{ clustername }}-{{ item }}.xml"
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
    insertafter: "  <devices>$"
    block: |
      <disk type="file" device="disk">
        <driver name="qemu" type="qcow2" cache="none"/>
        <source file="{{ clusters_dir }}/{{ clustername }}/{{ clustername }}-{{ item }}-extra-disk.qcow2"/>
        <target dev="vdb" bus="virtio"/>
      </disk>
  loop:
    - "master-0"
    - "master-1"
    - "master-2"
  register: extra_disks_result
  become: true
  changed_when: true
  when: installodf == "true" and sno == "false"

- name: Restart libvirt when adding extra disks
  ansible.builtin.service:
    name: libvirtd
    state: restarted
  become: true
  when: installodf == "true" and sno == "false"

- name: Starting virtual machines when 3-node cluster
  ansible.builtin.command: "virsh start {{ clustername }}-{{ item }}"
  register: startvms
  changed_when: startvms.rc == 0
  become: true
  with_items:
    - "bootstrap"
    - "master-0"
    - "master-1"
    - "master-2"
  when: sno == "false"
